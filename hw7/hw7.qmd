---
title: Homework 7 - Creating a resume database
author: Maxwell Goehle
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document includes the description of the resume database, including showing some of the tables and answering some query

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-MaxwellCGoehle.git>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This database includes people, their skills, their roles etc.

## Crows-foot diagram

(add a description of the diagram and what the reader is seeing.)

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--|| PEOPLESKILLS : have
    PEOPLE ||--|| PEOPLEROLES : have
    PEOPLESKILLS ||--o{ SKILLS : has
    PEOPLEROLES ||--|{ ROLES : has
    PEOPLE{
        int id
        varchar first_name
        varchar last_name
        varchar email
        varchar linkedin_url
        varchar discord_handle
        varchar brief_bio
        date date_joined 
    }SKILLS{
        int id
        varchar name
        varcahr description
        varchar tag
    }ROLES{
        int id
        varchar name
        int sort_priority
    }PEOPLEROLES{
        int id
        int people_id
        int roles_id
        date date_assigned
    }PEOPLESKILLS{
        int id
        int skills_id
        int people_id
        date date_aquired
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe peoples names, linkedin adresses, headshot pictures, discord handles, a brief bio, and the date they joined.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the name of the skills, gives a brief description and the tag.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles: their names and their priority.  

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT name, tag, description FROM skills
ORDER BY name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT first_name, last_name, email FROM people
ORDER BY last_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.name FROM people
JOIN peopleskills ON people.id = peopleskills.people_id
JOIN skills ON peopleskills.skills_id = skills.id
WHERE people.id = 1;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.first_name, people.last_name FROM people
JOIN peopleskills ON people.id = peopleskills.people_id
JOIN skills ON peopleskills.skills_id = skills.id
WHERE skills.id = 6;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.first_name, people.last_name FROM people
JOIN peopleroles ON people.id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
WHERE roles.name = 'DEVELOPER';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.first_name, people.last_name, people.email FROM people
LEFT JOIN peopleskills ON people.id = peopleskills.people_id
WHERE peopleskills.people_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.name, skills.tag FROM skills
LEFT JOIN peopleskills ON skills.id = peopleskills.skills_id
WHERE peopleskills.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.first_name, people.last_name, skills.name  FROM people
JOIN peopleroles ON people.id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
LEFT JOIN peopleskills ON people.id = peopleskills.people_id
LEFT JOIN skills ON peopleskills.skills_id = skills.id
WHERE roles.name = 'BOSS';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT roles.id, roles.name FROM roles
LEFT JOIN peopleroles ON roles.id = peopleroles.role_id
WHERE peopleroles.role_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

I learned a lot about databases in this assignment. It is all good and well to talk about these things in class but actually having to do it made me understand what was happening a lot more. I thought the assignment was not too difficult, and the help in class in order to help get us on the right track made it manageable in my opinion. I think this assignment helped to bridge the gap between theory and practice and I feel more confident in my skills now going into the group project again after this assignment. 

